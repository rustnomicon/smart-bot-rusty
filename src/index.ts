import { Bot, Context, type CommandContext } from "grammy";
import * as fs from "fs";
import { handleVideoConvert, handleVideoEdit } from "./logic/video/video";



// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
    const logFile = fs.createWriteStream("bot.log", { flags: "a" });
    console.log = function (...args) {
        const message = args.join(" ");
        logFile.write(`${new Date().toISOString()} - ${message}\n`);
        process.stdout.write(`${message}\n`);
    };

    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const token = Bun.env.TELEGRAM_TOKEN;

    if (!token) {
        console.error("TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è");
        process.exit(1);
    }

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    const bot = new Bot(token);
    bot.command("start", async (ctx) => {
        if (!ctx.message?.video) {
            await ctx.reply(
            `üëã *–ü—Ä–∏–≤–µ—Ç!* –Ø *self-hosted* –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Å–æ–æ–±—â–µ—Å—Ç–≤.\nüîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ: [–ß–∏—Ç–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é](https://example.com/docs)`,
                { parse_mode: "Markdown" }
            );
            
        }
    });
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ffmpeg –±–µ–∑ –≤–∏–¥–µ–æ
    bot.command("ffmpeg", async (ctx) => {
        if (!ctx.message?.video) {
            await ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –≤–º–µ—Å—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –∏ —Ñ–ª–∞–≥–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/ffmpeg [-vf scale=640:480 -c:v libx265 -crf 35 -b:v 100k -b:a 32k]");
        }
    });

    bot.command("convert", async (ctx) => {
        if (!ctx.message?.video) {
            await ctx.reply("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ –≤–º–µ—Å—Ç–µ —Å –∫–æ–º–∞–Ω–¥–æ–π –∏ —Ñ–æ—Ä–º–∞—Ç–æ–º –≤ –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n/convert mp4");
        }
    })
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–∏–¥–µ–æ
    bot.on("message:video", async (ctx) => {
        const caption = ctx.message?.caption || "";
        const text = ctx.message?.text || "";
    
        const hasFFmpegCommand = caption.startsWith("/ffmpeg") || text.startsWith("/ffmpeg");
        const hasConvertCommand = caption.startsWith("/convert") || text.startsWith("/convert");
        
        try {
            if (hasConvertCommand) {
                await handleConvertCommand(ctx, bot);
            } else if (hasFFmpegCommand) {
                await handleFFmpegCommand(ctx, bot);
            }
        } catch (error: unknown) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ: ${error instanceof Error ? error.message : error}`);
        }
    });
    
    async function handleConvertCommand(ctx: Context, bot: Bot): Promise<void> {
        console.log(`–ü–æ–ª—É—á–µ–Ω–æ –≤–∏–¥–µ–æ –æ—Ç ${ctx.from?.username} –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏`);
        
        const statusMsg = await ctx.reply("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ...");
        
        try {
            const messageStruct = await handleVideoConvert(ctx, bot);
            
            if (ctx.chat?.id && statusMsg.message_id) {
                await bot.api.editMessageText(
                    ctx.chat.id,
                    statusMsg.message_id,
                    "–í–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
                );
            }
            
            await ctx.replyWithVideo(messageStruct.video);
            
            fs.unlinkSync(messageStruct.pathToInput);
            fs.unlinkSync(messageStruct.pathToOutput);
        } catch (error: unknown) {
            const errorMessage = error instanceof Error ? error.message : String(error);
            console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: ${errorMessage}`);
            
            if (ctx.chat?.id && statusMsg.message_id) {
                await bot.api.editMessageText(
                    ctx.chat.id,
                    statusMsg.message_id,
                    `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: ${errorMessage}`
                );
            }
        }
    }
    
    async function handleFFmpegCommand(ctx: Context, bot: Bot): Promise<void> {
        console.log(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /ffmpeg –æ—Ç ${ctx.from?.username}`);
        
        const statusMsg = await ctx.reply("–ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ...");
        
        try {
            const messageStruct = await handleVideoEdit(ctx, bot);
            
            if (ctx.chat?.id && statusMsg.message_id) {
                await bot.api.editMessageText(
                    ctx.chat.id,
                    statusMsg.message_id,
                    "–í–∏–¥–µ–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!"
                );
            }
            
            const infoText = `–ò—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ: ${messageStruct.videoParams.inputSize} (${messageStruct.videoParams.inputVideoSize})
    –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ: ${messageStruct.videoParams.outputSize} (${messageStruct.videoParams.outputVideoSize})`;
            
            await ctx.replyWithVideo(messageStruct.video, { caption: infoText });
            
            fs.unlinkSync(messageStruct.videoParams.pathToInput);
            fs.unlinkSync(messageStruct.videoParams.pathToOutput);
        } catch (error: unknown) {
            const errorMessage = error instanceof Error ? error.message : String(error);
            console.error(`–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: ${errorMessage}`);
            
            if (ctx.chat?.id && statusMsg.message_id) {
                await bot.api.editMessageText(
                    ctx.chat.id,
                    statusMsg.message_id,
                    `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: ${errorMessage}`
                );
            }
        }
    };

    // –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot.start();
    console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω");
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
main().catch(console.error);

